<project name="Project" basedir="." default="all">

  <!-- Properties file for the environment, and some global properties -->
  <property name="properties.file" value="build.properties"/>
  <property file="${properties.file}"/>

  <property name="src.dir"      value="plugins/src"/>
  <property name="classes.dir"  value="bin"/>
  <property name="doc.dir"      value="doc"/>
  <property name="dist.dir"     value="dist"/>
  <property name="buildlib.dir" value="buildlibs"/>
  <property name="lib.dir"      value="plugins/lib"/>
  <property name="example.dir"  value="examples"/>
  <property name="test.dir"     value="tests"/>
  <property name="test.lib.dir" value="tests/lib"/>
  <property name="test.out.dir" value="test-output"/>
  <property name="zip.prefix"   value="${product.jar}-${product.version}"/>
  <property name="zip.file"     value="${zip.prefix}.zip"/>
  <property name="war.prefix"   value="${product.war}-${product.version}"/>
  <property name="war.file"     value="${zip.prefix}.war"/>

  <!-- =================================================================== -->
  <!-- Classpaths and internal initialization targets                      -->
  <!-- =================================================================== -->
  <path id="build.class.path">
    <pathelement location="${classes.dir}"/>
    <fileset dir="${lib.dir}" includes="**/*.jar"/>
    <fileset dir="${test.lib.dir}" includes="**/*.jar"/>
  </path>

  <target name="init" description="Creates directories needed by the build system.">
	<mkdir dir="${classes.dir}"/>
    <mkdir dir="${classes.dir}/META-INF"/>
	<mkdir dir="${dist.dir}"/>
	<mkdir dir="${doc.dir}"/>

    <!-- Get the product repository version -->
    <exec executable="svnversion" outputproperty="repository.version"
          failonerror="false" failifexecutionfails="false">
        <arg value="."/>
    </exec>
    <echo message="Specification Version is: ${product.version}"/>
    <echo message="Repository Version is: ${repository.version}"/>
  </target>


  <!-- =================================================================== -->
  <!-- Clean the build directory                                           -->
  <!-- =================================================================== -->
  <target name="clean" description="Deletes all the build products.">
    <delete dir="${classes.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete dir="${doc.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compile the code into the web app and move any resources into the   -->
  <!-- classpath.                                                          -->
  <!-- =================================================================== -->
  <target name="compile" depends="init" description="Compiles the java code for ${product.name}.">
    <javac target="1.5" destdir="${classes.dir}" debug="on">
      <src path="${src.dir}"/>
      <classpath refid="build.class.path"/>
    </javac>
    <javac target="1.5" destdir="${classes.dir}" debug="on">
      <src path="${test.dir}"/>
      <classpath refid="build.class.path"/>
    </javac>
    <javac target="1.5" destdir="${classes.dir}" debug="on">
      <src path="${example.dir}"/>
      <classpath refid="build.class.path"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Jar up the classes directory to create the library file.            -->
  <!-- =================================================================== -->
  <target name="jar" depends="compile" description="Builds the ${product.jar}-${product.version}.jar library file.">
    <jar destfile="${dist.dir}/${product.jar}-${product.version}.jar" basedir="${classes.dir}">
      <exclude name="org/stripesstuff/example/**"/>
      <exclude name="org/stripesstuff/tests/**"/>
      <manifest>
          <attribute name="Implementation-Title" value="${product.name}"/>
          <attribute name="Specification-Version" value="${product.version}"/>
          <attribute name="Implementation-Version" value="${repository.version}"/>
          <attribute name="Implementation-URL" value="${product.url}"/>
      </manifest>
      <metainf dir="plugins/META-INF"/>
    </jar>
    <copy todir="${example.dir}/web/WEB-INF/lib">
      <fileset dir="${dist.dir}" includes="${product.jar}-${product.version}.jar"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Jar up the classes directory to create the library file.            -->
  <!-- =================================================================== -->
  <target name="jarSource" depends="init" description="Builds the ${product.jar}-${product.version}-source.jar library file.">
    <jar destfile="${dist.dir}/${product.jar}-${product.version}-source.jar" basedir="${src.dir}">
      <exclude name="org/stripesstuff/example/**"/>
      <exclude name="org/stripesstuff/tests/**"/>
      <manifest>
          <attribute name="Implementation-Title" value="${product.name}"/>
          <attribute name="Specification-Version" value="${product.version}"/>
          <attribute name="Implementation-Version" value="${repository.version}"/>
          <attribute name="Implementation-URL" value="${product.url}"/>
      </manifest>
         <metainf dir="plugins/META-INF"/>
    </jar>
  </target>

  <!-- =================================================================== -->
  <!-- Generate the javadoc for all the sources in the project.            -->
  <!-- =================================================================== -->
  <target name="javadoc" depends="jar" description="Generates the ${product.name} javadoc.">
	<javadoc
	   sourcepath="${src.dir}"
	   destdir="${doc.dir}/api"
       extdirs="${lib.dir}"
	   classpathref="build.class.path"
	   packagenames="org.stripesstuff.plugin.*"
       stylesheetfile="${src.dir}/javadoc.css"
       overview="${src.dir}/overview.html"
       windowtitle="${product.name} ${product.version} API Documentation"
	   doctitle="&lt;h1&gt;${product.name} ${product.version} API Documentation&lt;/h1&gt;"
	   bottom="Copyright (c) 2008 Aaron Porter"
	   author="true"
	   protected="true"
	   use="true"
	   version="true">
	    <link href="http://java.sun.com/javase/6/docs/api/"/>
		<link href="http://java.sun.com/javaee/5/docs/api/"/>
		<link href="http://stripes.sourceforge.net/docs/current/javadoc/"/>
    </javadoc>
    <java fork="true" jar="${buildlib.dir}/tlddoc.jar" failonerror="true">
      <arg line="-d ${doc.dir}/tagapi"/>
      <arg value="${dist.dir}/${product.jar}-${product.version}.jar"/>
    </java>

  </target>

  <target name="all" depends="jar,javadoc,jarSource"/>

    <!-- =================================================================== -->
    <!-- Builds the full StripesStuff distribution file.                          -->
    <!-- =================================================================== -->
    <target name="dist" depends="jar,javadoc"
            description="Builds the StripesStuff distribution bundles.">
        <mkdir dir="${dist.dir}"/>
        <zip destfile="${dist.dir}/${zip.file}">
            <zipfileset dir="." includes="plugins/src/**/*" prefix="${zip.prefix}"/>
            <zipfileset dir="${doc.dir}/api" includes="**/*" prefix="${zip.prefix}/docs/javadoc"/>
            <zipfileset dir="${doc.dir}/tagapi" includes="**/*" prefix="${zip.prefix}/docs/tagdoc"/>
            <zipfileset dir="dist" includes="${product.jar}-${product.version}.jar" prefix="${zip.prefix}"/>
            <zipfileset dir="." includes="license.txt" prefix="${zip.prefix}"/>
        </zip>
	</target>

    <!-- =================================================================== -->
    <!-- Creates war file containing StripesStuff examples.                  -->
    <!-- =================================================================== -->
    <target name="war" depends="jar"
            description="Creates war file for web examples">
        <mkdir dir="${dist.dir}/war"/>

        <war destfile="${dist.dir}/${war.file}">
            <!-- copy web contents -->
            <zipfileset dir="${example.dir}/web" includes="**/*"/>
            <!-- copy classes -->
            <zipfileset dir="${classes.dir}" includes="**/*" excludes="**/org/stripesstuff/tests/**" prefix="WEB-INF/classes"/>
            <!-- copy jars -->
            <zipfileset dir="${lib.dir}" includes="**/*.jar" excludes="**/servlet-api.jar" prefix="WEB-INF/lib"/>
        </war>
    </target>

    <!-- =================================================================== -->
    <!-- Execute StripesStuff unit tests.                                    -->
    <!-- =================================================================== -->
    <target name="test" depends="compile"
        description="Run TestNG tests">
        <javac target="1.5" destdir="${classes.dir}" debug="on">
            <src path="${src.dir}"/>
        </javac>
        <taskdef resource="testngtasks" classpathref="build.class.path"/>

        <delete dir="${test.out.dir}"/>

        <testng classpathref="build.class.path" outputdir="${test.out.dir}" excludedgroups="long">
            <classfileset dir="${classes.dir}">
                <include name="**/*.class"/>
            </classfileset>
        </testng>

    </target>
</project>
